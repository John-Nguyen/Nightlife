'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.isSkipError = isSkipError;
exports['default'] = serialize;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodashLangIsFunction = require('lodash/lang/isFunction');

var _lodashLangIsFunction2 = _interopRequireDefault(_lodashLangIsFunction);

var K_SKIP_ERROR = 'K_SKIP_ERROR';

var serialize_ = function serialize_(promiseCaller) {
  var options = arguments[1] === undefined ? { raiseSkipError: true } : arguments[1];

  var isInRequest = false;
  var lastPromiseInvoke = null;
  var lastPromiseReject = null;

  var callNext = function callNext() {
    if (lastPromiseInvoke !== null) {
      isInRequest = true;
      lastPromiseInvoke();

      lastPromiseInvoke = null;
      lastPromiseReject = null;
    }
  };

  var wrapPromise = function wrapPromise(promise) {
    return promise.then(function (res) {
      isInRequest = false;
      callNext();
      return res;
    })['catch'](function (e) {
      console.error(e, e.stack); // eslint-disable-line no-console
      isInRequest = false;
      callNext();
      throw e;
    });
  };

  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (!isInRequest) {
      isInRequest = true;
      return wrapPromise(promiseCaller.apply(null, args));
    }

    if (lastPromiseReject !== null) {
      lastPromiseReject();
      lastPromiseInvoke = null;
      lastPromiseReject = null;
    }

    return new Promise(function (resolve, reject) {
      lastPromiseInvoke = function () {
        wrapPromise(promiseCaller.apply(null, args)).then(function (res) {
          return resolve(res);
        })['catch'](function (e) {
          return reject(e);
        });
      };

      lastPromiseReject = function () {
        if (options.raiseSkipError) {
          reject(new Error(K_SKIP_ERROR));
        }
      };
    });
  };
};

function isSkipError(e) {
  return e.message === K_SKIP_ERROR;
}

function serialize(optionsOrFn, maybeOptions) {
  if ((0, _lodashLangIsFunction2['default'])(optionsOrFn)) {
    return serialize_(optionsOrFn, maybeOptions);
  }

  return function (target, key, descriptor) {
    return {
      configurable: true,
      enumerable: true,
      get: function get() {
        var classMethod = typeof descriptor.get !== 'function' ? descriptor.value : descriptor.get.call(this);

        if (typeof classMethod !== 'function') {
          throw new Error('@serialize decorator can only be applied to methods not: ' + typeof classMethod);
        }

        var classMethodBinded = classMethod.bind(this);
        var serializedCallFn = serialize_(classMethodBinded, optionsOrFn);

        Object.defineProperty(this, key, {
          value: serializedCallFn,
          configurable: true,
          writable: true
        });

        return serializedCallFn;
      }
    };
  };
}